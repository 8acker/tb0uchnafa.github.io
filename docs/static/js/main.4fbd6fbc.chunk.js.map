{"version":3,"sources":["utils/assets.ts","components/Link/Link.tsx","App.js","assets sync /^/.//.*$","assets/facebook_logo.png","assets/profile.jpg","assets/twitter_logo.png","serviceWorker.js","index.js"],"names":["load","filename","require","Link","props","className","href","label","logo","src","hot","module","Assets","alt","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","exports","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAe,KACXA,KADW,SACNC,GACD,OAAOC,MAAQ,YAAaD,O,6BCFpC,0BAiBeE,IARF,SAACC,GACV,OACI,uBAAGC,UAAW,OAAQC,KAAMF,EAAME,MAC7BF,EAAMG,MADX,IACmBH,EAAMI,MAAQ,yBAAKH,UAAW,OAAQI,IAAKL,EAAMI,U,gCCZ5E,6DAmBeE,kBAAIC,EAAJD,EAbH,WACV,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKI,IAAKG,IAAOZ,KAAK,eAAgBK,UAAU,WAAWQ,IAAI,oBAC/D,2EACA,kBAAC,IAAD,CAAMP,KAAK,iCAAiCC,MAAM,UAAUC,KAAMI,IAAOZ,KAAK,sBAC9E,kBAAC,IAAD,CAAMM,KAAK,kCAAkCC,MAAM,WAAWC,KAAMI,IAAOZ,KAAK,8B,8FCbxF,IAAIc,EAAM,CACT,sBAAuB,GACvB,gBAAiB,GACjB,qBAAsB,IAIvB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBP,EAAOgB,QAAUZ,EACjBA,EAAeE,GAAK,I,gBCxBpBN,EAAOgB,QAAU,IAA0B,2C,gBCA3ChB,EAAOgB,QAAU,IAA0B,qC,gBCA3ChB,EAAOgB,QAAU,IAA0B,0C,4HCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fbd6fbc.chunk.js","sourcesContent":["export default {\n    load(filename: string) {\n        return require(`../assets/${filename}`);\n    }\n}","import React from \"react\";\nimport './Link.css'\n\ninterface LinkProps {\n    href: string;\n    label: string;\n    logo?: string;\n}\n\nconst Link = (props: LinkProps) => {\n    return (\n        <a className={'link'} href={props.href}>\n            {props.label} {props.logo && <img className={'logo'} src={props.logo} />}\n        </a>\n    )\n}\n\nexport default Link;","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport Assets from './utils/assets';\nimport './App.css';\nimport Link from \"./components/Link/Link\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={Assets.load('profile.jpg')} className=\"App-logo\" alt=\"Thami Bouchnafa\" />\n        <p>Welcome to Thami Bouchnafa personal homepage</p>\n        <Link href=\"https://twitter.com/tb0uchnafa\" label=\"Twitter\" logo={Assets.load('twitter_logo.png')}></Link>\n        <Link href=\"https://facebook/com/tb0uchnafa\" label=\"Facebook\" logo={Assets.load('facebook_logo.png')}></Link>\n      </header>\n    </div>\n  );\n}\n\nexport default hot(module)(App);\n","var map = {\n\t\"./facebook_logo.png\": 15,\n\t\"./profile.jpg\": 16,\n\t\"./twitter_logo.png\": 17\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;","module.exports = __webpack_public_path__ + \"static/media/facebook_logo.3ed8f11e.png\";","module.exports = __webpack_public_path__ + \"static/media/profile.a55cf254.jpg\";","module.exports = __webpack_public_path__ + \"static/media/twitter_logo.a55752a3.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}